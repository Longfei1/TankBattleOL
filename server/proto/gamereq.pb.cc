// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamereq.proto

#include "gamereq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gamereq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomPlayerInfo_gamereq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gamereq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOperation_gamereq_2eproto;
namespace gamereq {
class LoginInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginIn> _instance;
} _LoginIn_default_instance_;
class ErrorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorInfo> _instance;
} _ErrorInfo_default_instance_;
class LoginOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginOut> _instance;
} _LoginOut_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class RoomPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomPlayerInfo> _instance;
} _RoomPlayerInfo_default_instance_;
class MenuSwitchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MenuSwitchInfo> _instance;
} _MenuSwitchInfo_default_instance_;
class MenuChooseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MenuChooseInfo> _instance;
} _MenuChooseInfo_default_instance_;
class GameStartRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartRsp> _instance;
} _GameStartRsp_default_instance_;
class UserOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserOperation> _instance;
} _UserOperation_default_instance_;
class GameFrameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameFrameReq> _instance;
} _GameFrameReq_default_instance_;
class GameFrameNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameFrameNtf> _instance;
} _GameFrameNtf_default_instance_;
}  // namespace gamereq
static void InitDefaultsscc_info_ErrorInfo_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_ErrorInfo_default_instance_;
    new (ptr) ::gamereq::ErrorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorInfo_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorInfo_gamereq_2eproto}, {}};

static void InitDefaultsscc_info_GameFrameNtf_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_GameFrameNtf_default_instance_;
    new (ptr) ::gamereq::GameFrameNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameFrameNtf_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameFrameNtf_gamereq_2eproto}, {
      &scc_info_UserOperation_gamereq_2eproto.base,}};

static void InitDefaultsscc_info_GameFrameReq_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_GameFrameReq_default_instance_;
    new (ptr) ::gamereq::GameFrameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameFrameReq_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameFrameReq_gamereq_2eproto}, {
      &scc_info_UserOperation_gamereq_2eproto.base,}};

static void InitDefaultsscc_info_GameStartRsp_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_GameStartRsp_default_instance_;
    new (ptr) ::gamereq::GameStartRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartRsp_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameStartRsp_gamereq_2eproto}, {
      &scc_info_RoomPlayerInfo_gamereq_2eproto.base,}};

static void InitDefaultsscc_info_LoginIn_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_LoginIn_default_instance_;
    new (ptr) ::gamereq::LoginIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginIn_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginIn_gamereq_2eproto}, {}};

static void InitDefaultsscc_info_LoginOut_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_LoginOut_default_instance_;
    new (ptr) ::gamereq::LoginOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginOut_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginOut_gamereq_2eproto}, {}};

static void InitDefaultsscc_info_MenuChooseInfo_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_MenuChooseInfo_default_instance_;
    new (ptr) ::gamereq::MenuChooseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MenuChooseInfo_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MenuChooseInfo_gamereq_2eproto}, {
      &scc_info_RoomPlayerInfo_gamereq_2eproto.base,}};

static void InitDefaultsscc_info_MenuSwitchInfo_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_MenuSwitchInfo_default_instance_;
    new (ptr) ::gamereq::MenuSwitchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MenuSwitchInfo_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MenuSwitchInfo_gamereq_2eproto}, {
      &scc_info_RoomPlayerInfo_gamereq_2eproto.base,}};

static void InitDefaultsscc_info_RoomPlayerInfo_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_RoomPlayerInfo_default_instance_;
    new (ptr) ::gamereq::RoomPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomPlayerInfo_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomPlayerInfo_gamereq_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_UserInfo_default_instance_;
    new (ptr) ::gamereq::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_gamereq_2eproto}, {}};

static void InitDefaultsscc_info_UserOperation_gamereq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gamereq::_UserOperation_default_instance_;
    new (ptr) ::gamereq::UserOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOperation_gamereq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserOperation_gamereq_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gamereq_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gamereq_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gamereq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gamereq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::LoginIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::LoginIn, userid_),
  PROTOBUF_FIELD_OFFSET(::gamereq::LoginIn, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::ErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::ErrorInfo, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::LoginOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::LoginOut, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::UserInfo, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::RoomPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::RoomPlayerInfo, roomid_),
  PROTOBUF_FIELD_OFFSET(::gamereq::RoomPlayerInfo, playerno_),
  PROTOBUF_FIELD_OFFSET(::gamereq::RoomPlayerInfo, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuSwitchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuSwitchInfo, where_),
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuSwitchInfo, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuChooseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuChooseInfo, where_),
  PROTOBUF_FIELD_OFFSET(::gamereq::MenuChooseInfo, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameStartRsp, where_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameStartRsp, mode_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameStartRsp, randomseed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::UserOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::UserOperation, playerno_),
  PROTOBUF_FIELD_OFFSET(::gamereq::UserOperation, opecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameReq, roomid_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameReq, userid_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameReq, frame_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameReq, userope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameNtf, frame_),
  PROTOBUF_FIELD_OFFSET(::gamereq::GameFrameNtf, useropes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gamereq::LoginIn)},
  { 7, -1, sizeof(::gamereq::ErrorInfo)},
  { 13, -1, sizeof(::gamereq::LoginOut)},
  { 19, -1, sizeof(::gamereq::UserInfo)},
  { 25, -1, sizeof(::gamereq::RoomPlayerInfo)},
  { 33, -1, sizeof(::gamereq::MenuSwitchInfo)},
  { 40, -1, sizeof(::gamereq::MenuChooseInfo)},
  { 47, -1, sizeof(::gamereq::GameStartRsp)},
  { 55, -1, sizeof(::gamereq::UserOperation)},
  { 62, -1, sizeof(::gamereq::GameFrameReq)},
  { 71, -1, sizeof(::gamereq::GameFrameNtf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_LoginIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_ErrorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_LoginOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_RoomPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_MenuSwitchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_MenuChooseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_GameStartRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_UserOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_GameFrameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gamereq::_GameFrameNtf_default_instance_),
};

const char descriptor_table_protodef_gamereq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rgamereq.proto\022\007gamereq\",\n\007LoginIn\022\016\n\006u"
  "serid\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\" \n\tErrorI"
  "nfo\022\023\n\013description\030\001 \001(\t\"\032\n\010LoginOut\022\016\n\006"
  "userid\030\001 \001(\r\"\032\n\010UserInfo\022\016\n\006userid\030\001 \001(\r"
  "\"B\n\016RoomPlayerInfo\022\016\n\006roomid\030\001 \001(\r\022\020\n\010pl"
  "ayerno\030\002 \001(\r\022\016\n\006userid\030\003 \001(\r\"G\n\016MenuSwit"
  "chInfo\022&\n\005where\030\001 \001(\0132\027.gamereq.RoomPlay"
  "erInfo\022\r\n\005index\030\002 \001(\r\"G\n\016MenuChooseInfo\022"
  "&\n\005where\030\001 \001(\0132\027.gamereq.RoomPlayerInfo\022"
  "\r\n\005index\030\002 \001(\005\"X\n\014GameStartRsp\022&\n\005where\030"
  "\001 \001(\0132\027.gamereq.RoomPlayerInfo\022\014\n\004mode\030\002"
  " \001(\r\022\022\n\nrandomseed\030\003 \001(\r\"2\n\rUserOperatio"
  "n\022\020\n\010playerno\030\001 \001(\r\022\017\n\007opecode\030\002 \001(\r\"f\n\014"
  "GameFrameReq\022\016\n\006roomid\030\001 \001(\r\022\016\n\006userid\030\002"
  " \001(\r\022\r\n\005frame\030\003 \001(\r\022\'\n\007userope\030\004 \001(\0132\026.g"
  "amereq.UserOperation\"G\n\014GameFrameNtf\022\r\n\005"
  "frame\030\001 \001(\r\022(\n\010useropes\030\002 \003(\0132\026.gamereq."
  "UserOperationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gamereq_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gamereq_2eproto_sccs[11] = {
  &scc_info_ErrorInfo_gamereq_2eproto.base,
  &scc_info_GameFrameNtf_gamereq_2eproto.base,
  &scc_info_GameFrameReq_gamereq_2eproto.base,
  &scc_info_GameStartRsp_gamereq_2eproto.base,
  &scc_info_LoginIn_gamereq_2eproto.base,
  &scc_info_LoginOut_gamereq_2eproto.base,
  &scc_info_MenuChooseInfo_gamereq_2eproto.base,
  &scc_info_MenuSwitchInfo_gamereq_2eproto.base,
  &scc_info_RoomPlayerInfo_gamereq_2eproto.base,
  &scc_info_UserInfo_gamereq_2eproto.base,
  &scc_info_UserOperation_gamereq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gamereq_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gamereq_2eproto = {
  false, false, descriptor_table_protodef_gamereq_2eproto, "gamereq.proto", 701,
  &descriptor_table_gamereq_2eproto_once, descriptor_table_gamereq_2eproto_sccs, descriptor_table_gamereq_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_gamereq_2eproto::offsets,
  file_level_metadata_gamereq_2eproto, 11, file_level_enum_descriptors_gamereq_2eproto, file_level_service_descriptors_gamereq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gamereq_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gamereq_2eproto)), true);
namespace gamereq {

// ===================================================================

class LoginIn::_Internal {
 public:
};

LoginIn::LoginIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.LoginIn)
}
LoginIn::LoginIn(const LoginIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:gamereq.LoginIn)
}

void LoginIn::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(userid_));
}

LoginIn::~LoginIn() {
  // @@protoc_insertion_point(destructor:gamereq.LoginIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginIn::ArenaDtor(void* object) {
  LoginIn* _this = reinterpret_cast< LoginIn* >(object);
  (void)_this;
}
void LoginIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginIn& LoginIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginIn_gamereq_2eproto.base);
  return *internal_default_instance();
}


void LoginIn::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.LoginIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.LoginIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.LoginIn)
  return target;
}

size_t LoginIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.LoginIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.LoginIn)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.LoginIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.LoginIn)
    MergeFrom(*source);
  }
}

void LoginIn::MergeFrom(const LoginIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.LoginIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void LoginIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.LoginIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginIn::CopyFrom(const LoginIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.LoginIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginIn::IsInitialized() const {
  return true;
}

void LoginIn::InternalSwap(LoginIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginIn, userid_)
      + sizeof(LoginIn::userid_)
      - PROTOBUF_FIELD_OFFSET(LoginIn, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorInfo::_Internal {
 public:
};

ErrorInfo::ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.ErrorInfo)
}
ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gamereq.ErrorInfo)
}

void ErrorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorInfo_gamereq_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:gamereq.ErrorInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorInfo::ArenaDtor(void* object) {
  ErrorInfo* _this = reinterpret_cast< ErrorInfo* >(object);
  (void)_this;
}
void ErrorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorInfo& ErrorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorInfo_gamereq_2eproto.base);
  return *internal_default_instance();
}


void ErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.ErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gamereq.ErrorInfo.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.ErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gamereq.ErrorInfo.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.ErrorInfo)
  return target;
}

size_t ErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.ErrorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.ErrorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.ErrorInfo)
    MergeFrom(*source);
  }
}

void ErrorInfo::MergeFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
}

void ErrorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  return true;
}

void ErrorInfo::InternalSwap(ErrorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginOut::_Internal {
 public:
};

LoginOut::LoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.LoginOut)
}
LoginOut::LoginOut(const LoginOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gamereq.LoginOut)
}

void LoginOut::SharedCtor() {
  userid_ = 0u;
}

LoginOut::~LoginOut() {
  // @@protoc_insertion_point(destructor:gamereq.LoginOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginOut::ArenaDtor(void* object) {
  LoginOut* _this = reinterpret_cast< LoginOut* >(object);
  (void)_this;
}
void LoginOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginOut& LoginOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginOut_gamereq_2eproto.base);
  return *internal_default_instance();
}


void LoginOut::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.LoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.LoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.LoginOut)
  return target;
}

size_t LoginOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.LoginOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.LoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.LoginOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.LoginOut)
    MergeFrom(*source);
  }
}

void LoginOut::MergeFrom(const LoginOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.LoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void LoginOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.LoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginOut::CopyFrom(const LoginOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.LoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginOut::IsInitialized() const {
  return true;
}

void LoginOut::InternalSwap(LoginOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gamereq.UserInfo)
}

void UserInfo::SharedCtor() {
  userid_ = 0u;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:gamereq.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_gamereq_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoomPlayerInfo::_Internal {
 public:
};

RoomPlayerInfo::RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.RoomPlayerInfo)
}
RoomPlayerInfo::RoomPlayerInfo(const RoomPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:gamereq.RoomPlayerInfo)
}

void RoomPlayerInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
}

RoomPlayerInfo::~RoomPlayerInfo() {
  // @@protoc_insertion_point(destructor:gamereq.RoomPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomPlayerInfo::ArenaDtor(void* object) {
  RoomPlayerInfo* _this = reinterpret_cast< RoomPlayerInfo* >(object);
  (void)_this;
}
void RoomPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomPlayerInfo& RoomPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomPlayerInfo_gamereq_2eproto.base);
  return *internal_default_instance();
}


void RoomPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.RoomPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 playerno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.RoomPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roomid(), target);
  }

  // uint32 playerno = 2;
  if (this->playerno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerno(), target);
  }

  // uint32 userid = 3;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.RoomPlayerInfo)
  return target;
}

size_t RoomPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.RoomPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roomid());
  }

  // uint32 playerno = 2;
  if (this->playerno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerno());
  }

  // uint32 userid = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.RoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.RoomPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.RoomPlayerInfo)
    MergeFrom(*source);
  }
}

void RoomPlayerInfo::MergeFrom(const RoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.RoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.playerno() != 0) {
    _internal_set_playerno(from._internal_playerno());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void RoomPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.RoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerInfo::CopyFrom(const RoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.RoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerInfo::IsInitialized() const {
  return true;
}

void RoomPlayerInfo::InternalSwap(RoomPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomPlayerInfo, userid_)
      + sizeof(RoomPlayerInfo::userid_)
      - PROTOBUF_FIELD_OFFSET(RoomPlayerInfo, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MenuSwitchInfo::_Internal {
 public:
  static const ::gamereq::RoomPlayerInfo& where(const MenuSwitchInfo* msg);
};

const ::gamereq::RoomPlayerInfo&
MenuSwitchInfo::_Internal::where(const MenuSwitchInfo* msg) {
  return *msg->where_;
}
MenuSwitchInfo::MenuSwitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.MenuSwitchInfo)
}
MenuSwitchInfo::MenuSwitchInfo(const MenuSwitchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_where()) {
    where_ = new ::gamereq::RoomPlayerInfo(*from.where_);
  } else {
    where_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:gamereq.MenuSwitchInfo)
}

void MenuSwitchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MenuSwitchInfo_gamereq_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&where_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&where_)) + sizeof(index_));
}

MenuSwitchInfo::~MenuSwitchInfo() {
  // @@protoc_insertion_point(destructor:gamereq.MenuSwitchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MenuSwitchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete where_;
}

void MenuSwitchInfo::ArenaDtor(void* object) {
  MenuSwitchInfo* _this = reinterpret_cast< MenuSwitchInfo* >(object);
  (void)_this;
}
void MenuSwitchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenuSwitchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MenuSwitchInfo& MenuSwitchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MenuSwitchInfo_gamereq_2eproto.base);
  return *internal_default_instance();
}


void MenuSwitchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.MenuSwitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenuSwitchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gamereq.RoomPlayerInfo where = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_where(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MenuSwitchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.MenuSwitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::where(this), target, stream);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.MenuSwitchInfo)
  return target;
}

size_t MenuSwitchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.MenuSwitchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *where_);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MenuSwitchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.MenuSwitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MenuSwitchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MenuSwitchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.MenuSwitchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.MenuSwitchInfo)
    MergeFrom(*source);
  }
}

void MenuSwitchInfo::MergeFrom(const MenuSwitchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.MenuSwitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_where()) {
    _internal_mutable_where()->::gamereq::RoomPlayerInfo::MergeFrom(from._internal_where());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void MenuSwitchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.MenuSwitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuSwitchInfo::CopyFrom(const MenuSwitchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.MenuSwitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuSwitchInfo::IsInitialized() const {
  return true;
}

void MenuSwitchInfo::InternalSwap(MenuSwitchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MenuSwitchInfo, index_)
      + sizeof(MenuSwitchInfo::index_)
      - PROTOBUF_FIELD_OFFSET(MenuSwitchInfo, where_)>(
          reinterpret_cast<char*>(&where_),
          reinterpret_cast<char*>(&other->where_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuSwitchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MenuChooseInfo::_Internal {
 public:
  static const ::gamereq::RoomPlayerInfo& where(const MenuChooseInfo* msg);
};

const ::gamereq::RoomPlayerInfo&
MenuChooseInfo::_Internal::where(const MenuChooseInfo* msg) {
  return *msg->where_;
}
MenuChooseInfo::MenuChooseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.MenuChooseInfo)
}
MenuChooseInfo::MenuChooseInfo(const MenuChooseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_where()) {
    where_ = new ::gamereq::RoomPlayerInfo(*from.where_);
  } else {
    where_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:gamereq.MenuChooseInfo)
}

void MenuChooseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MenuChooseInfo_gamereq_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&where_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&where_)) + sizeof(index_));
}

MenuChooseInfo::~MenuChooseInfo() {
  // @@protoc_insertion_point(destructor:gamereq.MenuChooseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MenuChooseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete where_;
}

void MenuChooseInfo::ArenaDtor(void* object) {
  MenuChooseInfo* _this = reinterpret_cast< MenuChooseInfo* >(object);
  (void)_this;
}
void MenuChooseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MenuChooseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MenuChooseInfo& MenuChooseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MenuChooseInfo_gamereq_2eproto.base);
  return *internal_default_instance();
}


void MenuChooseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.MenuChooseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MenuChooseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gamereq.RoomPlayerInfo where = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_where(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MenuChooseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.MenuChooseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::where(this), target, stream);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.MenuChooseInfo)
  return target;
}

size_t MenuChooseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.MenuChooseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *where_);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MenuChooseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.MenuChooseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MenuChooseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MenuChooseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.MenuChooseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.MenuChooseInfo)
    MergeFrom(*source);
  }
}

void MenuChooseInfo::MergeFrom(const MenuChooseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.MenuChooseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_where()) {
    _internal_mutable_where()->::gamereq::RoomPlayerInfo::MergeFrom(from._internal_where());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void MenuChooseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.MenuChooseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuChooseInfo::CopyFrom(const MenuChooseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.MenuChooseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuChooseInfo::IsInitialized() const {
  return true;
}

void MenuChooseInfo::InternalSwap(MenuChooseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MenuChooseInfo, index_)
      + sizeof(MenuChooseInfo::index_)
      - PROTOBUF_FIELD_OFFSET(MenuChooseInfo, where_)>(
          reinterpret_cast<char*>(&where_),
          reinterpret_cast<char*>(&other->where_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuChooseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameStartRsp::_Internal {
 public:
  static const ::gamereq::RoomPlayerInfo& where(const GameStartRsp* msg);
};

const ::gamereq::RoomPlayerInfo&
GameStartRsp::_Internal::where(const GameStartRsp* msg) {
  return *msg->where_;
}
GameStartRsp::GameStartRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.GameStartRsp)
}
GameStartRsp::GameStartRsp(const GameStartRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_where()) {
    where_ = new ::gamereq::RoomPlayerInfo(*from.where_);
  } else {
    where_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(randomseed_));
  // @@protoc_insertion_point(copy_constructor:gamereq.GameStartRsp)
}

void GameStartRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStartRsp_gamereq_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&where_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&randomseed_) -
      reinterpret_cast<char*>(&where_)) + sizeof(randomseed_));
}

GameStartRsp::~GameStartRsp() {
  // @@protoc_insertion_point(destructor:gamereq.GameStartRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStartRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete where_;
}

void GameStartRsp::ArenaDtor(void* object) {
  GameStartRsp* _this = reinterpret_cast< GameStartRsp* >(object);
  (void)_this;
}
void GameStartRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStartRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRsp& GameStartRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartRsp_gamereq_2eproto.base);
  return *internal_default_instance();
}


void GameStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.GameStartRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomseed_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(randomseed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStartRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gamereq.RoomPlayerInfo where = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_where(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 randomseed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.GameStartRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::where(this), target, stream);
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // uint32 randomseed = 3;
  if (this->randomseed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_randomseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.GameStartRsp)
  return target;
}

size_t GameStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.GameStartRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gamereq.RoomPlayerInfo where = 1;
  if (this->has_where()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *where_);
  }

  // uint32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  // uint32 randomseed = 3;
  if (this->randomseed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_randomseed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.GameStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStartRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.GameStartRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.GameStartRsp)
    MergeFrom(*source);
  }
}

void GameStartRsp::MergeFrom(const GameStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.GameStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_where()) {
    _internal_mutable_where()->::gamereq::RoomPlayerInfo::MergeFrom(from._internal_where());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.randomseed() != 0) {
    _internal_set_randomseed(from._internal_randomseed());
  }
}

void GameStartRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.GameStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartRsp::CopyFrom(const GameStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.GameStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRsp::IsInitialized() const {
  return true;
}

void GameStartRsp::InternalSwap(GameStartRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartRsp, randomseed_)
      + sizeof(GameStartRsp::randomseed_)
      - PROTOBUF_FIELD_OFFSET(GameStartRsp, where_)>(
          reinterpret_cast<char*>(&where_),
          reinterpret_cast<char*>(&other->where_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserOperation::_Internal {
 public:
};

UserOperation::UserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.UserOperation)
}
UserOperation::UserOperation(const UserOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerno_, &from.playerno_,
    static_cast<size_t>(reinterpret_cast<char*>(&opecode_) -
    reinterpret_cast<char*>(&playerno_)) + sizeof(opecode_));
  // @@protoc_insertion_point(copy_constructor:gamereq.UserOperation)
}

void UserOperation::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&playerno_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&opecode_) -
      reinterpret_cast<char*>(&playerno_)) + sizeof(opecode_));
}

UserOperation::~UserOperation() {
  // @@protoc_insertion_point(destructor:gamereq.UserOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserOperation::ArenaDtor(void* object) {
  UserOperation* _this = reinterpret_cast< UserOperation* >(object);
  (void)_this;
}
void UserOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserOperation& UserOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserOperation_gamereq_2eproto.base);
  return *internal_default_instance();
}


void UserOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.UserOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opecode_) -
      reinterpret_cast<char*>(&playerno_)) + sizeof(opecode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 playerno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 opecode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          opecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.UserOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerno = 1;
  if (this->playerno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerno(), target);
  }

  // uint32 opecode = 2;
  if (this->opecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.UserOperation)
  return target;
}

size_t UserOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.UserOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerno = 1;
  if (this->playerno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_playerno());
  }

  // uint32 opecode = 2;
  if (this->opecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opecode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.UserOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.UserOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.UserOperation)
    MergeFrom(*source);
  }
}

void UserOperation::MergeFrom(const UserOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.UserOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerno() != 0) {
    _internal_set_playerno(from._internal_playerno());
  }
  if (from.opecode() != 0) {
    _internal_set_opecode(from._internal_opecode());
  }
}

void UserOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.UserOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOperation::CopyFrom(const UserOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.UserOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperation::IsInitialized() const {
  return true;
}

void UserOperation::InternalSwap(UserOperation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserOperation, opecode_)
      + sizeof(UserOperation::opecode_)
      - PROTOBUF_FIELD_OFFSET(UserOperation, playerno_)>(
          reinterpret_cast<char*>(&playerno_),
          reinterpret_cast<char*>(&other->playerno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameFrameReq::_Internal {
 public:
  static const ::gamereq::UserOperation& userope(const GameFrameReq* msg);
};

const ::gamereq::UserOperation&
GameFrameReq::_Internal::userope(const GameFrameReq* msg) {
  return *msg->userope_;
}
GameFrameReq::GameFrameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.GameFrameReq)
}
GameFrameReq::GameFrameReq(const GameFrameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_userope()) {
    userope_ = new ::gamereq::UserOperation(*from.userope_);
  } else {
    userope_ = nullptr;
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:gamereq.GameFrameReq)
}

void GameFrameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameFrameReq_gamereq_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&userope_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&userope_)) + sizeof(frame_));
}

GameFrameReq::~GameFrameReq() {
  // @@protoc_insertion_point(destructor:gamereq.GameFrameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameFrameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete userope_;
}

void GameFrameReq::ArenaDtor(void* object) {
  GameFrameReq* _this = reinterpret_cast< GameFrameReq* >(object);
  (void)_this;
}
void GameFrameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameFrameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFrameReq& GameFrameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameFrameReq_gamereq_2eproto.base);
  return *internal_default_instance();
}


void GameFrameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.GameFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && userope_ != nullptr) {
    delete userope_;
  }
  userope_ = nullptr;
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameFrameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gamereq.UserOperation userope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_userope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameFrameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.GameFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roomid(), target);
  }

  // uint32 userid = 2;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_userid(), target);
  }

  // uint32 frame = 3;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame(), target);
  }

  // .gamereq.UserOperation userope = 4;
  if (this->has_userope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::userope(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.GameFrameReq)
  return target;
}

size_t GameFrameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.GameFrameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gamereq.UserOperation userope = 4;
  if (this->has_userope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userope_);
  }

  // uint32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roomid());
  }

  // uint32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  // uint32 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFrameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.GameFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFrameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameFrameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.GameFrameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.GameFrameReq)
    MergeFrom(*source);
  }
}

void GameFrameReq::MergeFrom(const GameFrameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.GameFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userope()) {
    _internal_mutable_userope()->::gamereq::UserOperation::MergeFrom(from._internal_userope());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void GameFrameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.GameFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFrameReq::CopyFrom(const GameFrameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.GameFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFrameReq::IsInitialized() const {
  return true;
}

void GameFrameReq::InternalSwap(GameFrameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameFrameReq, frame_)
      + sizeof(GameFrameReq::frame_)
      - PROTOBUF_FIELD_OFFSET(GameFrameReq, userope_)>(
          reinterpret_cast<char*>(&userope_),
          reinterpret_cast<char*>(&other->userope_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFrameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameFrameNtf::_Internal {
 public:
};

GameFrameNtf::GameFrameNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  useropes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gamereq.GameFrameNtf)
}
GameFrameNtf::GameFrameNtf(const GameFrameNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      useropes_(from.useropes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:gamereq.GameFrameNtf)
}

void GameFrameNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameFrameNtf_gamereq_2eproto.base);
  frame_ = 0u;
}

GameFrameNtf::~GameFrameNtf() {
  // @@protoc_insertion_point(destructor:gamereq.GameFrameNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameFrameNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameFrameNtf::ArenaDtor(void* object) {
  GameFrameNtf* _this = reinterpret_cast< GameFrameNtf* >(object);
  (void)_this;
}
void GameFrameNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameFrameNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFrameNtf& GameFrameNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameFrameNtf_gamereq_2eproto.base);
  return *internal_default_instance();
}


void GameFrameNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:gamereq.GameFrameNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  useropes_.Clear();
  frame_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameFrameNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gamereq.UserOperation useropes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_useropes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameFrameNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamereq.GameFrameNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame = 1;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame(), target);
  }

  // repeated .gamereq.UserOperation useropes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_useropes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_useropes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamereq.GameFrameNtf)
  return target;
}

size_t GameFrameNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gamereq.GameFrameNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gamereq.UserOperation useropes = 2;
  total_size += 1UL * this->_internal_useropes_size();
  for (const auto& msg : this->useropes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFrameNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gamereq.GameFrameNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFrameNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameFrameNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gamereq.GameFrameNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gamereq.GameFrameNtf)
    MergeFrom(*source);
  }
}

void GameFrameNtf::MergeFrom(const GameFrameNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gamereq.GameFrameNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  useropes_.MergeFrom(from.useropes_);
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void GameFrameNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gamereq.GameFrameNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFrameNtf::CopyFrom(const GameFrameNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gamereq.GameFrameNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFrameNtf::IsInitialized() const {
  return true;
}

void GameFrameNtf::InternalSwap(GameFrameNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  useropes_.InternalSwap(&other->useropes_);
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFrameNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gamereq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gamereq::LoginIn* Arena::CreateMaybeMessage< ::gamereq::LoginIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::LoginIn >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::ErrorInfo* Arena::CreateMaybeMessage< ::gamereq::ErrorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::ErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::LoginOut* Arena::CreateMaybeMessage< ::gamereq::LoginOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::LoginOut >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::UserInfo* Arena::CreateMaybeMessage< ::gamereq::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::RoomPlayerInfo* Arena::CreateMaybeMessage< ::gamereq::RoomPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::RoomPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::MenuSwitchInfo* Arena::CreateMaybeMessage< ::gamereq::MenuSwitchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::MenuSwitchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::MenuChooseInfo* Arena::CreateMaybeMessage< ::gamereq::MenuChooseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::MenuChooseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::GameStartRsp* Arena::CreateMaybeMessage< ::gamereq::GameStartRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::GameStartRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::UserOperation* Arena::CreateMaybeMessage< ::gamereq::UserOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::UserOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::GameFrameReq* Arena::CreateMaybeMessage< ::gamereq::GameFrameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::GameFrameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::gamereq::GameFrameNtf* Arena::CreateMaybeMessage< ::gamereq::GameFrameNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gamereq::GameFrameNtf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
