// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamereq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gamereq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gamereq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gamereq_2eproto;
namespace gamereq {
class ErrorInfo;
class ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class GameFrameNtf;
class GameFrameNtfDefaultTypeInternal;
extern GameFrameNtfDefaultTypeInternal _GameFrameNtf_default_instance_;
class GameFrameReq;
class GameFrameReqDefaultTypeInternal;
extern GameFrameReqDefaultTypeInternal _GameFrameReq_default_instance_;
class GameStartRsp;
class GameStartRspDefaultTypeInternal;
extern GameStartRspDefaultTypeInternal _GameStartRsp_default_instance_;
class LoginIn;
class LoginInDefaultTypeInternal;
extern LoginInDefaultTypeInternal _LoginIn_default_instance_;
class LoginInRsp;
class LoginInRspDefaultTypeInternal;
extern LoginInRspDefaultTypeInternal _LoginInRsp_default_instance_;
class MenuChooseInfo;
class MenuChooseInfoDefaultTypeInternal;
extern MenuChooseInfoDefaultTypeInternal _MenuChooseInfo_default_instance_;
class MenuSwitchInfo;
class MenuSwitchInfoDefaultTypeInternal;
extern MenuSwitchInfoDefaultTypeInternal _MenuSwitchInfo_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class RoomPlayerInfo;
class RoomPlayerInfoDefaultTypeInternal;
extern RoomPlayerInfoDefaultTypeInternal _RoomPlayerInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserOperation;
class UserOperationDefaultTypeInternal;
extern UserOperationDefaultTypeInternal _UserOperation_default_instance_;
}  // namespace gamereq
PROTOBUF_NAMESPACE_OPEN
template<> ::gamereq::ErrorInfo* Arena::CreateMaybeMessage<::gamereq::ErrorInfo>(Arena*);
template<> ::gamereq::GameFrameNtf* Arena::CreateMaybeMessage<::gamereq::GameFrameNtf>(Arena*);
template<> ::gamereq::GameFrameReq* Arena::CreateMaybeMessage<::gamereq::GameFrameReq>(Arena*);
template<> ::gamereq::GameStartRsp* Arena::CreateMaybeMessage<::gamereq::GameStartRsp>(Arena*);
template<> ::gamereq::LoginIn* Arena::CreateMaybeMessage<::gamereq::LoginIn>(Arena*);
template<> ::gamereq::LoginInRsp* Arena::CreateMaybeMessage<::gamereq::LoginInRsp>(Arena*);
template<> ::gamereq::MenuChooseInfo* Arena::CreateMaybeMessage<::gamereq::MenuChooseInfo>(Arena*);
template<> ::gamereq::MenuSwitchInfo* Arena::CreateMaybeMessage<::gamereq::MenuSwitchInfo>(Arena*);
template<> ::gamereq::PlayerInfo* Arena::CreateMaybeMessage<::gamereq::PlayerInfo>(Arena*);
template<> ::gamereq::RoomPlayerInfo* Arena::CreateMaybeMessage<::gamereq::RoomPlayerInfo>(Arena*);
template<> ::gamereq::UserInfo* Arena::CreateMaybeMessage<::gamereq::UserInfo>(Arena*);
template<> ::gamereq::UserOperation* Arena::CreateMaybeMessage<::gamereq::UserOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gamereq {

// ===================================================================

class LoginIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.LoginIn) */ {
 public:
  inline LoginIn() : LoginIn(nullptr) {}
  virtual ~LoginIn();

  LoginIn(const LoginIn& from);
  LoginIn(LoginIn&& from) noexcept
    : LoginIn() {
    *this = ::std::move(from);
  }

  inline LoginIn& operator=(const LoginIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginIn& operator=(LoginIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginIn& default_instance();

  static inline const LoginIn* internal_default_instance() {
    return reinterpret_cast<const LoginIn*>(
               &_LoginIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginIn& a, LoginIn& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginIn* New() const final {
    return CreateMaybeMessage<LoginIn>(nullptr);
  }

  LoginIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginIn& from);
  void MergeFrom(const LoginIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.LoginIn";
  }
  protected:
  explicit LoginIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kUseridFieldNumber = 1,
    kSyncframeFieldNumber = 3,
  };
  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 syncframe = 3;
  void clear_syncframe();
  ::PROTOBUF_NAMESPACE_ID::uint32 syncframe() const;
  void set_syncframe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_syncframe() const;
  void _internal_set_syncframe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.LoginIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 syncframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayernoFieldNumber = 1,
    kUseridFieldNumber = 2,
    kReadyFieldNumber = 3,
  };
  // uint32 playerno = 1;
  void clear_playerno();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno() const;
  void set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerno() const;
  void _internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ready = 3;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class LoginInRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.LoginInRsp) */ {
 public:
  inline LoginInRsp() : LoginInRsp(nullptr) {}
  virtual ~LoginInRsp();

  LoginInRsp(const LoginInRsp& from);
  LoginInRsp(LoginInRsp&& from) noexcept
    : LoginInRsp() {
    *this = ::std::move(from);
  }

  inline LoginInRsp& operator=(const LoginInRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInRsp& operator=(LoginInRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginInRsp& default_instance();

  static inline const LoginInRsp* internal_default_instance() {
    return reinterpret_cast<const LoginInRsp*>(
               &_LoginInRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginInRsp& a, LoginInRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginInRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginInRsp* New() const final {
    return CreateMaybeMessage<LoginInRsp>(nullptr);
  }

  LoginInRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginInRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginInRsp& from);
  void MergeFrom(const LoginInRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.LoginInRsp";
  }
  protected:
  explicit LoginInRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 8,
    kFramerecordFieldNumber = 9,
    kTimestampFieldNumber = 2,
    kUseridFieldNumber = 1,
    kRoomidFieldNumber = 3,
    kRoomstatusFieldNumber = 4,
    kMenuindexFieldNumber = 5,
    kGamemodeFieldNumber = 6,
    kRandomseedFieldNumber = 7,
  };
  // repeated .gamereq.PlayerInfo players = 8;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::gamereq::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::PlayerInfo >*
      mutable_players();
  private:
  const ::gamereq::PlayerInfo& _internal_players(int index) const;
  ::gamereq::PlayerInfo* _internal_add_players();
  public:
  const ::gamereq::PlayerInfo& players(int index) const;
  ::gamereq::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::PlayerInfo >&
      players() const;

  // repeated .gamereq.GameFrameNtf framerecord = 9;
  int framerecord_size() const;
  private:
  int _internal_framerecord_size() const;
  public:
  void clear_framerecord();
  ::gamereq::GameFrameNtf* mutable_framerecord(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrameNtf >*
      mutable_framerecord();
  private:
  const ::gamereq::GameFrameNtf& _internal_framerecord(int index) const;
  ::gamereq::GameFrameNtf* _internal_add_framerecord();
  public:
  const ::gamereq::GameFrameNtf& framerecord(int index) const;
  ::gamereq::GameFrameNtf* add_framerecord();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrameNtf >&
      framerecord() const;

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roomid = 3;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 roomstatus = 4;
  void clear_roomstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomstatus() const;
  void set_roomstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomstatus() const;
  void _internal_set_roomstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 menuindex = 5;
  void clear_menuindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 menuindex() const;
  void set_menuindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_menuindex() const;
  void _internal_set_menuindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gamemode = 6;
  void clear_gamemode();
  ::PROTOBUF_NAMESPACE_ID::uint32 gamemode() const;
  void set_gamemode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gamemode() const;
  void _internal_set_gamemode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 randomseed = 7;
  void clear_randomseed();
  ::PROTOBUF_NAMESPACE_ID::uint32 randomseed() const;
  void set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_randomseed() const;
  void _internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.LoginInRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::PlayerInfo > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrameNtf > framerecord_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 menuindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gamemode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 randomseed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class ErrorInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.ErrorInfo) */ {
 public:
  inline ErrorInfo() : ErrorInfo(nullptr) {}
  virtual ~ErrorInfo();

  ErrorInfo(const ErrorInfo& from);
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorInfo& default_instance();

  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const final {
    return CreateMaybeMessage<ErrorInfo>(nullptr);
  }

  ErrorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.ErrorInfo";
  }
  protected:
  explicit ErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:gamereq.ErrorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class RoomPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.RoomPlayerInfo) */ {
 public:
  inline RoomPlayerInfo() : RoomPlayerInfo(nullptr) {}
  virtual ~RoomPlayerInfo();

  RoomPlayerInfo(const RoomPlayerInfo& from);
  RoomPlayerInfo(RoomPlayerInfo&& from) noexcept
    : RoomPlayerInfo() {
    *this = ::std::move(from);
  }

  inline RoomPlayerInfo& operator=(const RoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomPlayerInfo& operator=(RoomPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomPlayerInfo& default_instance();

  static inline const RoomPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const RoomPlayerInfo*>(
               &_RoomPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomPlayerInfo& a, RoomPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomPlayerInfo* New() const final {
    return CreateMaybeMessage<RoomPlayerInfo>(nullptr);
  }

  RoomPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomPlayerInfo& from);
  void MergeFrom(const RoomPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.RoomPlayerInfo";
  }
  protected:
  explicit RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
    kPlayernoFieldNumber = 2,
    kUseridFieldNumber = 3,
  };
  // uint32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 playerno = 2;
  void clear_playerno();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno() const;
  void set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerno() const;
  void _internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userid = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.RoomPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class MenuSwitchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.MenuSwitchInfo) */ {
 public:
  inline MenuSwitchInfo() : MenuSwitchInfo(nullptr) {}
  virtual ~MenuSwitchInfo();

  MenuSwitchInfo(const MenuSwitchInfo& from);
  MenuSwitchInfo(MenuSwitchInfo&& from) noexcept
    : MenuSwitchInfo() {
    *this = ::std::move(from);
  }

  inline MenuSwitchInfo& operator=(const MenuSwitchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuSwitchInfo& operator=(MenuSwitchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MenuSwitchInfo& default_instance();

  static inline const MenuSwitchInfo* internal_default_instance() {
    return reinterpret_cast<const MenuSwitchInfo*>(
               &_MenuSwitchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MenuSwitchInfo& a, MenuSwitchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuSwitchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MenuSwitchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MenuSwitchInfo* New() const final {
    return CreateMaybeMessage<MenuSwitchInfo>(nullptr);
  }

  MenuSwitchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MenuSwitchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MenuSwitchInfo& from);
  void MergeFrom(const MenuSwitchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuSwitchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.MenuSwitchInfo";
  }
  protected:
  explicit MenuSwitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .gamereq.RoomPlayerInfo where = 1;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const ::gamereq::RoomPlayerInfo& where() const;
  ::gamereq::RoomPlayerInfo* release_where();
  ::gamereq::RoomPlayerInfo* mutable_where();
  void set_allocated_where(::gamereq::RoomPlayerInfo* where);
  private:
  const ::gamereq::RoomPlayerInfo& _internal_where() const;
  ::gamereq::RoomPlayerInfo* _internal_mutable_where();
  public:
  void unsafe_arena_set_allocated_where(
      ::gamereq::RoomPlayerInfo* where);
  ::gamereq::RoomPlayerInfo* unsafe_arena_release_where();

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.MenuSwitchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::RoomPlayerInfo* where_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class MenuChooseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.MenuChooseInfo) */ {
 public:
  inline MenuChooseInfo() : MenuChooseInfo(nullptr) {}
  virtual ~MenuChooseInfo();

  MenuChooseInfo(const MenuChooseInfo& from);
  MenuChooseInfo(MenuChooseInfo&& from) noexcept
    : MenuChooseInfo() {
    *this = ::std::move(from);
  }

  inline MenuChooseInfo& operator=(const MenuChooseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuChooseInfo& operator=(MenuChooseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MenuChooseInfo& default_instance();

  static inline const MenuChooseInfo* internal_default_instance() {
    return reinterpret_cast<const MenuChooseInfo*>(
               &_MenuChooseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MenuChooseInfo& a, MenuChooseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuChooseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MenuChooseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MenuChooseInfo* New() const final {
    return CreateMaybeMessage<MenuChooseInfo>(nullptr);
  }

  MenuChooseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MenuChooseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MenuChooseInfo& from);
  void MergeFrom(const MenuChooseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuChooseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.MenuChooseInfo";
  }
  protected:
  explicit MenuChooseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .gamereq.RoomPlayerInfo where = 1;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const ::gamereq::RoomPlayerInfo& where() const;
  ::gamereq::RoomPlayerInfo* release_where();
  ::gamereq::RoomPlayerInfo* mutable_where();
  void set_allocated_where(::gamereq::RoomPlayerInfo* where);
  private:
  const ::gamereq::RoomPlayerInfo& _internal_where() const;
  ::gamereq::RoomPlayerInfo* _internal_mutable_where();
  public:
  void unsafe_arena_set_allocated_where(
      ::gamereq::RoomPlayerInfo* where);
  ::gamereq::RoomPlayerInfo* unsafe_arena_release_where();

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.MenuChooseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::RoomPlayerInfo* where_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class GameStartRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.GameStartRsp) */ {
 public:
  inline GameStartRsp() : GameStartRsp(nullptr) {}
  virtual ~GameStartRsp();

  GameStartRsp(const GameStartRsp& from);
  GameStartRsp(GameStartRsp&& from) noexcept
    : GameStartRsp() {
    *this = ::std::move(from);
  }

  inline GameStartRsp& operator=(const GameStartRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartRsp& operator=(GameStartRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStartRsp& default_instance();

  static inline const GameStartRsp* internal_default_instance() {
    return reinterpret_cast<const GameStartRsp*>(
               &_GameStartRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameStartRsp& a, GameStartRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStartRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStartRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStartRsp* New() const final {
    return CreateMaybeMessage<GameStartRsp>(nullptr);
  }

  GameStartRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStartRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStartRsp& from);
  void MergeFrom(const GameStartRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.GameStartRsp";
  }
  protected:
  explicit GameStartRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 1,
    kModeFieldNumber = 2,
    kRandomseedFieldNumber = 3,
  };
  // .gamereq.RoomPlayerInfo where = 1;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const ::gamereq::RoomPlayerInfo& where() const;
  ::gamereq::RoomPlayerInfo* release_where();
  ::gamereq::RoomPlayerInfo* mutable_where();
  void set_allocated_where(::gamereq::RoomPlayerInfo* where);
  private:
  const ::gamereq::RoomPlayerInfo& _internal_where() const;
  ::gamereq::RoomPlayerInfo* _internal_mutable_where();
  public:
  void unsafe_arena_set_allocated_where(
      ::gamereq::RoomPlayerInfo* where);
  ::gamereq::RoomPlayerInfo* unsafe_arena_release_where();

  // uint32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 randomseed = 3;
  void clear_randomseed();
  ::PROTOBUF_NAMESPACE_ID::uint32 randomseed() const;
  void set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_randomseed() const;
  void _internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.GameStartRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::RoomPlayerInfo* where_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 randomseed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class UserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.UserOperation) */ {
 public:
  inline UserOperation() : UserOperation(nullptr) {}
  virtual ~UserOperation();

  UserOperation(const UserOperation& from);
  UserOperation(UserOperation&& from) noexcept
    : UserOperation() {
    *this = ::std::move(from);
  }

  inline UserOperation& operator=(const UserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOperation& operator=(UserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOperation& default_instance();

  static inline const UserOperation* internal_default_instance() {
    return reinterpret_cast<const UserOperation*>(
               &_UserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserOperation& a, UserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOperation* New() const final {
    return CreateMaybeMessage<UserOperation>(nullptr);
  }

  UserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOperation& from);
  void MergeFrom(const UserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.UserOperation";
  }
  protected:
  explicit UserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayernoFieldNumber = 1,
    kOpecodeFieldNumber = 2,
  };
  // uint32 playerno = 1;
  void clear_playerno();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno() const;
  void set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerno() const;
  void _internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 opecode = 2;
  void clear_opecode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opecode() const;
  void set_opecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opecode() const;
  void _internal_set_opecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.UserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opecode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class GameFrameReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.GameFrameReq) */ {
 public:
  inline GameFrameReq() : GameFrameReq(nullptr) {}
  virtual ~GameFrameReq();

  GameFrameReq(const GameFrameReq& from);
  GameFrameReq(GameFrameReq&& from) noexcept
    : GameFrameReq() {
    *this = ::std::move(from);
  }

  inline GameFrameReq& operator=(const GameFrameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFrameReq& operator=(GameFrameReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameFrameReq& default_instance();

  static inline const GameFrameReq* internal_default_instance() {
    return reinterpret_cast<const GameFrameReq*>(
               &_GameFrameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameFrameReq& a, GameFrameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFrameReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFrameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameFrameReq* New() const final {
    return CreateMaybeMessage<GameFrameReq>(nullptr);
  }

  GameFrameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameFrameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameFrameReq& from);
  void MergeFrom(const GameFrameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFrameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.GameFrameReq";
  }
  protected:
  explicit GameFrameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseropeFieldNumber = 4,
    kRoomidFieldNumber = 1,
    kUseridFieldNumber = 2,
    kFrameFieldNumber = 3,
  };
  // .gamereq.UserOperation userope = 4;
  bool has_userope() const;
  private:
  bool _internal_has_userope() const;
  public:
  void clear_userope();
  const ::gamereq::UserOperation& userope() const;
  ::gamereq::UserOperation* release_userope();
  ::gamereq::UserOperation* mutable_userope();
  void set_allocated_userope(::gamereq::UserOperation* userope);
  private:
  const ::gamereq::UserOperation& _internal_userope() const;
  ::gamereq::UserOperation* _internal_mutable_userope();
  public:
  void unsafe_arena_set_allocated_userope(
      ::gamereq::UserOperation* userope);
  ::gamereq::UserOperation* unsafe_arena_release_userope();

  // uint32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frame = 3;
  void clear_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame() const;
  void _internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.GameFrameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::UserOperation* userope_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class GameFrameNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.GameFrameNtf) */ {
 public:
  inline GameFrameNtf() : GameFrameNtf(nullptr) {}
  virtual ~GameFrameNtf();

  GameFrameNtf(const GameFrameNtf& from);
  GameFrameNtf(GameFrameNtf&& from) noexcept
    : GameFrameNtf() {
    *this = ::std::move(from);
  }

  inline GameFrameNtf& operator=(const GameFrameNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFrameNtf& operator=(GameFrameNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameFrameNtf& default_instance();

  static inline const GameFrameNtf* internal_default_instance() {
    return reinterpret_cast<const GameFrameNtf*>(
               &_GameFrameNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameFrameNtf& a, GameFrameNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFrameNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFrameNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameFrameNtf* New() const final {
    return CreateMaybeMessage<GameFrameNtf>(nullptr);
  }

  GameFrameNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameFrameNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameFrameNtf& from);
  void MergeFrom(const GameFrameNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFrameNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.GameFrameNtf";
  }
  protected:
  explicit GameFrameNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseropesFieldNumber = 2,
    kFrameFieldNumber = 1,
  };
  // repeated .gamereq.UserOperation useropes = 2;
  int useropes_size() const;
  private:
  int _internal_useropes_size() const;
  public:
  void clear_useropes();
  ::gamereq::UserOperation* mutable_useropes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >*
      mutable_useropes();
  private:
  const ::gamereq::UserOperation& _internal_useropes(int index) const;
  ::gamereq::UserOperation* _internal_add_useropes();
  public:
  const ::gamereq::UserOperation& useropes(int index) const;
  ::gamereq::UserOperation* add_useropes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >&
      useropes() const;

  // uint32 frame = 1;
  void clear_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame() const;
  void _internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.GameFrameNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation > useropes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginIn

// uint32 userid = 1;
inline void LoginIn::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIn::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIn::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginIn.userid)
  return _internal_userid();
}
inline void LoginIn::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void LoginIn::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginIn.userid)
}

// uint64 timestamp = 2;
inline void LoginIn::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginIn::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginIn::timestamp() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginIn.timestamp)
  return _internal_timestamp();
}
inline void LoginIn::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void LoginIn::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginIn.timestamp)
}

// uint32 syncframe = 3;
inline void LoginIn::clear_syncframe() {
  syncframe_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIn::_internal_syncframe() const {
  return syncframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIn::syncframe() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginIn.syncframe)
  return _internal_syncframe();
}
inline void LoginIn::_internal_set_syncframe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  syncframe_ = value;
}
inline void LoginIn::set_syncframe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_syncframe(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginIn.syncframe)
}

// -------------------------------------------------------------------

// PlayerInfo

// uint32 playerno = 1;
inline void PlayerInfo::clear_playerno() {
  playerno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_playerno() const {
  return playerno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::playerno() const {
  // @@protoc_insertion_point(field_get:gamereq.PlayerInfo.playerno)
  return _internal_playerno();
}
inline void PlayerInfo::_internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerno_ = value;
}
inline void PlayerInfo::set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerno(value);
  // @@protoc_insertion_point(field_set:gamereq.PlayerInfo.playerno)
}

// uint32 userid = 2;
inline void PlayerInfo::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.PlayerInfo.userid)
  return _internal_userid();
}
inline void PlayerInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void PlayerInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.PlayerInfo.userid)
}

// bool ready = 3;
inline void PlayerInfo::clear_ready() {
  ready_ = false;
}
inline bool PlayerInfo::_internal_ready() const {
  return ready_;
}
inline bool PlayerInfo::ready() const {
  // @@protoc_insertion_point(field_get:gamereq.PlayerInfo.ready)
  return _internal_ready();
}
inline void PlayerInfo::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void PlayerInfo::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:gamereq.PlayerInfo.ready)
}

// -------------------------------------------------------------------

// LoginInRsp

// uint32 userid = 1;
inline void LoginInRsp::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.userid)
  return _internal_userid();
}
inline void LoginInRsp::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void LoginInRsp::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.userid)
}

// uint64 timestamp = 2;
inline void LoginInRsp::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginInRsp::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginInRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.timestamp)
  return _internal_timestamp();
}
inline void LoginInRsp::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void LoginInRsp::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.timestamp)
}

// uint32 roomid = 3;
inline void LoginInRsp::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::roomid() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.roomid)
  return _internal_roomid();
}
inline void LoginInRsp::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
}
inline void LoginInRsp::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.roomid)
}

// uint32 roomstatus = 4;
inline void LoginInRsp::clear_roomstatus() {
  roomstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_roomstatus() const {
  return roomstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::roomstatus() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.roomstatus)
  return _internal_roomstatus();
}
inline void LoginInRsp::_internal_set_roomstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomstatus_ = value;
}
inline void LoginInRsp::set_roomstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomstatus(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.roomstatus)
}

// uint32 menuindex = 5;
inline void LoginInRsp::clear_menuindex() {
  menuindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_menuindex() const {
  return menuindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::menuindex() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.menuindex)
  return _internal_menuindex();
}
inline void LoginInRsp::_internal_set_menuindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  menuindex_ = value;
}
inline void LoginInRsp::set_menuindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_menuindex(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.menuindex)
}

// uint32 gamemode = 6;
inline void LoginInRsp::clear_gamemode() {
  gamemode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_gamemode() const {
  return gamemode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::gamemode() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.gamemode)
  return _internal_gamemode();
}
inline void LoginInRsp::_internal_set_gamemode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gamemode_ = value;
}
inline void LoginInRsp::set_gamemode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.gamemode)
}

// uint32 randomseed = 7;
inline void LoginInRsp::clear_randomseed() {
  randomseed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::_internal_randomseed() const {
  return randomseed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginInRsp::randomseed() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.randomseed)
  return _internal_randomseed();
}
inline void LoginInRsp::_internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  randomseed_ = value;
}
inline void LoginInRsp::set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_randomseed(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInRsp.randomseed)
}

// repeated .gamereq.PlayerInfo players = 8;
inline int LoginInRsp::_internal_players_size() const {
  return players_.size();
}
inline int LoginInRsp::players_size() const {
  return _internal_players_size();
}
inline void LoginInRsp::clear_players() {
  players_.Clear();
}
inline ::gamereq::PlayerInfo* LoginInRsp::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:gamereq.LoginInRsp.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::PlayerInfo >*
LoginInRsp::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:gamereq.LoginInRsp.players)
  return &players_;
}
inline const ::gamereq::PlayerInfo& LoginInRsp::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::gamereq::PlayerInfo& LoginInRsp::players(int index) const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.players)
  return _internal_players(index);
}
inline ::gamereq::PlayerInfo* LoginInRsp::_internal_add_players() {
  return players_.Add();
}
inline ::gamereq::PlayerInfo* LoginInRsp::add_players() {
  // @@protoc_insertion_point(field_add:gamereq.LoginInRsp.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::PlayerInfo >&
LoginInRsp::players() const {
  // @@protoc_insertion_point(field_list:gamereq.LoginInRsp.players)
  return players_;
}

// repeated .gamereq.GameFrameNtf framerecord = 9;
inline int LoginInRsp::_internal_framerecord_size() const {
  return framerecord_.size();
}
inline int LoginInRsp::framerecord_size() const {
  return _internal_framerecord_size();
}
inline void LoginInRsp::clear_framerecord() {
  framerecord_.Clear();
}
inline ::gamereq::GameFrameNtf* LoginInRsp::mutable_framerecord(int index) {
  // @@protoc_insertion_point(field_mutable:gamereq.LoginInRsp.framerecord)
  return framerecord_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrameNtf >*
LoginInRsp::mutable_framerecord() {
  // @@protoc_insertion_point(field_mutable_list:gamereq.LoginInRsp.framerecord)
  return &framerecord_;
}
inline const ::gamereq::GameFrameNtf& LoginInRsp::_internal_framerecord(int index) const {
  return framerecord_.Get(index);
}
inline const ::gamereq::GameFrameNtf& LoginInRsp::framerecord(int index) const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInRsp.framerecord)
  return _internal_framerecord(index);
}
inline ::gamereq::GameFrameNtf* LoginInRsp::_internal_add_framerecord() {
  return framerecord_.Add();
}
inline ::gamereq::GameFrameNtf* LoginInRsp::add_framerecord() {
  // @@protoc_insertion_point(field_add:gamereq.LoginInRsp.framerecord)
  return _internal_add_framerecord();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrameNtf >&
LoginInRsp::framerecord() const {
  // @@protoc_insertion_point(field_list:gamereq.LoginInRsp.framerecord)
  return framerecord_;
}

// -------------------------------------------------------------------

// ErrorInfo

// string description = 1;
inline void ErrorInfo::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ErrorInfo::description() const {
  // @@protoc_insertion_point(field_get:gamereq.ErrorInfo.description)
  return _internal_description();
}
inline void ErrorInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:gamereq.ErrorInfo.description)
}
inline std::string* ErrorInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:gamereq.ErrorInfo.description)
  return _internal_mutable_description();
}
inline const std::string& ErrorInfo::_internal_description() const {
  return description_.Get();
}
inline void ErrorInfo::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorInfo::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gamereq.ErrorInfo.description)
}
inline void ErrorInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gamereq.ErrorInfo.description)
}
inline void ErrorInfo::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gamereq.ErrorInfo.description)
}
inline std::string* ErrorInfo::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorInfo::release_description() {
  // @@protoc_insertion_point(field_release:gamereq.ErrorInfo.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gamereq.ErrorInfo.description)
}

// -------------------------------------------------------------------

// UserInfo

// uint32 userid = 1;
inline void UserInfo::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.UserInfo.userid)
  return _internal_userid();
}
inline void UserInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void UserInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.UserInfo.userid)
}

// -------------------------------------------------------------------

// RoomPlayerInfo

// uint32 roomid = 1;
inline void RoomPlayerInfo::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::roomid() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.roomid)
  return _internal_roomid();
}
inline void RoomPlayerInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
}
inline void RoomPlayerInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.roomid)
}

// uint32 playerno = 2;
inline void RoomPlayerInfo::clear_playerno() {
  playerno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::_internal_playerno() const {
  return playerno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::playerno() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.playerno)
  return _internal_playerno();
}
inline void RoomPlayerInfo::_internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerno_ = value;
}
inline void RoomPlayerInfo::set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerno(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.playerno)
}

// uint32 userid = 3;
inline void RoomPlayerInfo::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoomPlayerInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.userid)
  return _internal_userid();
}
inline void RoomPlayerInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void RoomPlayerInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.userid)
}

// -------------------------------------------------------------------

// MenuSwitchInfo

// .gamereq.RoomPlayerInfo where = 1;
inline bool MenuSwitchInfo::_internal_has_where() const {
  return this != internal_default_instance() && where_ != nullptr;
}
inline bool MenuSwitchInfo::has_where() const {
  return _internal_has_where();
}
inline void MenuSwitchInfo::clear_where() {
  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
}
inline const ::gamereq::RoomPlayerInfo& MenuSwitchInfo::_internal_where() const {
  const ::gamereq::RoomPlayerInfo* p = where_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::RoomPlayerInfo&>(
      ::gamereq::_RoomPlayerInfo_default_instance_);
}
inline const ::gamereq::RoomPlayerInfo& MenuSwitchInfo::where() const {
  // @@protoc_insertion_point(field_get:gamereq.MenuSwitchInfo.where)
  return _internal_where();
}
inline void MenuSwitchInfo::unsafe_arena_set_allocated_where(
    ::gamereq::RoomPlayerInfo* where) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(where_);
  }
  where_ = where;
  if (where) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.MenuSwitchInfo.where)
}
inline ::gamereq::RoomPlayerInfo* MenuSwitchInfo::release_where() {
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::RoomPlayerInfo* MenuSwitchInfo::unsafe_arena_release_where() {
  // @@protoc_insertion_point(field_release:gamereq.MenuSwitchInfo.where)
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  return temp;
}
inline ::gamereq::RoomPlayerInfo* MenuSwitchInfo::_internal_mutable_where() {
  
  if (where_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::RoomPlayerInfo>(GetArena());
    where_ = p;
  }
  return where_;
}
inline ::gamereq::RoomPlayerInfo* MenuSwitchInfo::mutable_where() {
  // @@protoc_insertion_point(field_mutable:gamereq.MenuSwitchInfo.where)
  return _internal_mutable_where();
}
inline void MenuSwitchInfo::set_allocated_where(::gamereq::RoomPlayerInfo* where) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete where_;
  }
  if (where) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(where);
    if (message_arena != submessage_arena) {
      where = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    
  } else {
    
  }
  where_ = where;
  // @@protoc_insertion_point(field_set_allocated:gamereq.MenuSwitchInfo.where)
}

// uint32 index = 2;
inline void MenuSwitchInfo::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuSwitchInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuSwitchInfo::index() const {
  // @@protoc_insertion_point(field_get:gamereq.MenuSwitchInfo.index)
  return _internal_index();
}
inline void MenuSwitchInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void MenuSwitchInfo::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:gamereq.MenuSwitchInfo.index)
}

// -------------------------------------------------------------------

// MenuChooseInfo

// .gamereq.RoomPlayerInfo where = 1;
inline bool MenuChooseInfo::_internal_has_where() const {
  return this != internal_default_instance() && where_ != nullptr;
}
inline bool MenuChooseInfo::has_where() const {
  return _internal_has_where();
}
inline void MenuChooseInfo::clear_where() {
  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
}
inline const ::gamereq::RoomPlayerInfo& MenuChooseInfo::_internal_where() const {
  const ::gamereq::RoomPlayerInfo* p = where_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::RoomPlayerInfo&>(
      ::gamereq::_RoomPlayerInfo_default_instance_);
}
inline const ::gamereq::RoomPlayerInfo& MenuChooseInfo::where() const {
  // @@protoc_insertion_point(field_get:gamereq.MenuChooseInfo.where)
  return _internal_where();
}
inline void MenuChooseInfo::unsafe_arena_set_allocated_where(
    ::gamereq::RoomPlayerInfo* where) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(where_);
  }
  where_ = where;
  if (where) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.MenuChooseInfo.where)
}
inline ::gamereq::RoomPlayerInfo* MenuChooseInfo::release_where() {
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::RoomPlayerInfo* MenuChooseInfo::unsafe_arena_release_where() {
  // @@protoc_insertion_point(field_release:gamereq.MenuChooseInfo.where)
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  return temp;
}
inline ::gamereq::RoomPlayerInfo* MenuChooseInfo::_internal_mutable_where() {
  
  if (where_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::RoomPlayerInfo>(GetArena());
    where_ = p;
  }
  return where_;
}
inline ::gamereq::RoomPlayerInfo* MenuChooseInfo::mutable_where() {
  // @@protoc_insertion_point(field_mutable:gamereq.MenuChooseInfo.where)
  return _internal_mutable_where();
}
inline void MenuChooseInfo::set_allocated_where(::gamereq::RoomPlayerInfo* where) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete where_;
  }
  if (where) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(where);
    if (message_arena != submessage_arena) {
      where = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    
  } else {
    
  }
  where_ = where;
  // @@protoc_insertion_point(field_set_allocated:gamereq.MenuChooseInfo.where)
}

// int32 index = 2;
inline void MenuChooseInfo::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MenuChooseInfo::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MenuChooseInfo::index() const {
  // @@protoc_insertion_point(field_get:gamereq.MenuChooseInfo.index)
  return _internal_index();
}
inline void MenuChooseInfo::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void MenuChooseInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:gamereq.MenuChooseInfo.index)
}

// -------------------------------------------------------------------

// GameStartRsp

// .gamereq.RoomPlayerInfo where = 1;
inline bool GameStartRsp::_internal_has_where() const {
  return this != internal_default_instance() && where_ != nullptr;
}
inline bool GameStartRsp::has_where() const {
  return _internal_has_where();
}
inline void GameStartRsp::clear_where() {
  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
}
inline const ::gamereq::RoomPlayerInfo& GameStartRsp::_internal_where() const {
  const ::gamereq::RoomPlayerInfo* p = where_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::RoomPlayerInfo&>(
      ::gamereq::_RoomPlayerInfo_default_instance_);
}
inline const ::gamereq::RoomPlayerInfo& GameStartRsp::where() const {
  // @@protoc_insertion_point(field_get:gamereq.GameStartRsp.where)
  return _internal_where();
}
inline void GameStartRsp::unsafe_arena_set_allocated_where(
    ::gamereq::RoomPlayerInfo* where) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(where_);
  }
  where_ = where;
  if (where) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.GameStartRsp.where)
}
inline ::gamereq::RoomPlayerInfo* GameStartRsp::release_where() {
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::RoomPlayerInfo* GameStartRsp::unsafe_arena_release_where() {
  // @@protoc_insertion_point(field_release:gamereq.GameStartRsp.where)
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  return temp;
}
inline ::gamereq::RoomPlayerInfo* GameStartRsp::_internal_mutable_where() {
  
  if (where_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::RoomPlayerInfo>(GetArena());
    where_ = p;
  }
  return where_;
}
inline ::gamereq::RoomPlayerInfo* GameStartRsp::mutable_where() {
  // @@protoc_insertion_point(field_mutable:gamereq.GameStartRsp.where)
  return _internal_mutable_where();
}
inline void GameStartRsp::set_allocated_where(::gamereq::RoomPlayerInfo* where) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete where_;
  }
  if (where) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(where);
    if (message_arena != submessage_arena) {
      where = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    
  } else {
    
  }
  where_ = where;
  // @@protoc_insertion_point(field_set_allocated:gamereq.GameStartRsp.where)
}

// uint32 mode = 2;
inline void GameStartRsp::clear_mode() {
  mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartRsp::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartRsp::mode() const {
  // @@protoc_insertion_point(field_get:gamereq.GameStartRsp.mode)
  return _internal_mode();
}
inline void GameStartRsp::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mode_ = value;
}
inline void GameStartRsp::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:gamereq.GameStartRsp.mode)
}

// uint32 randomseed = 3;
inline void GameStartRsp::clear_randomseed() {
  randomseed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartRsp::_internal_randomseed() const {
  return randomseed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameStartRsp::randomseed() const {
  // @@protoc_insertion_point(field_get:gamereq.GameStartRsp.randomseed)
  return _internal_randomseed();
}
inline void GameStartRsp::_internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  randomseed_ = value;
}
inline void GameStartRsp::set_randomseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_randomseed(value);
  // @@protoc_insertion_point(field_set:gamereq.GameStartRsp.randomseed)
}

// -------------------------------------------------------------------

// UserOperation

// uint32 playerno = 1;
inline void UserOperation::clear_playerno() {
  playerno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserOperation::_internal_playerno() const {
  return playerno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserOperation::playerno() const {
  // @@protoc_insertion_point(field_get:gamereq.UserOperation.playerno)
  return _internal_playerno();
}
inline void UserOperation::_internal_set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerno_ = value;
}
inline void UserOperation::set_playerno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerno(value);
  // @@protoc_insertion_point(field_set:gamereq.UserOperation.playerno)
}

// uint32 opecode = 2;
inline void UserOperation::clear_opecode() {
  opecode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserOperation::_internal_opecode() const {
  return opecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserOperation::opecode() const {
  // @@protoc_insertion_point(field_get:gamereq.UserOperation.opecode)
  return _internal_opecode();
}
inline void UserOperation::_internal_set_opecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opecode_ = value;
}
inline void UserOperation::set_opecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opecode(value);
  // @@protoc_insertion_point(field_set:gamereq.UserOperation.opecode)
}

// -------------------------------------------------------------------

// GameFrameReq

// uint32 roomid = 1;
inline void GameFrameReq::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::roomid() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameReq.roomid)
  return _internal_roomid();
}
inline void GameFrameReq::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
}
inline void GameFrameReq::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:gamereq.GameFrameReq.roomid)
}

// uint32 userid = 2;
inline void GameFrameReq::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameReq.userid)
  return _internal_userid();
}
inline void GameFrameReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void GameFrameReq::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.GameFrameReq.userid)
}

// uint32 frame = 3;
inline void GameFrameReq::clear_frame() {
  frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::_internal_frame() const {
  return frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameReq::frame() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameReq.frame)
  return _internal_frame();
}
inline void GameFrameReq::_internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_ = value;
}
inline void GameFrameReq::set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:gamereq.GameFrameReq.frame)
}

// .gamereq.UserOperation userope = 4;
inline bool GameFrameReq::_internal_has_userope() const {
  return this != internal_default_instance() && userope_ != nullptr;
}
inline bool GameFrameReq::has_userope() const {
  return _internal_has_userope();
}
inline void GameFrameReq::clear_userope() {
  if (GetArena() == nullptr && userope_ != nullptr) {
    delete userope_;
  }
  userope_ = nullptr;
}
inline const ::gamereq::UserOperation& GameFrameReq::_internal_userope() const {
  const ::gamereq::UserOperation* p = userope_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::UserOperation&>(
      ::gamereq::_UserOperation_default_instance_);
}
inline const ::gamereq::UserOperation& GameFrameReq::userope() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameReq.userope)
  return _internal_userope();
}
inline void GameFrameReq::unsafe_arena_set_allocated_userope(
    ::gamereq::UserOperation* userope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userope_);
  }
  userope_ = userope;
  if (userope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.GameFrameReq.userope)
}
inline ::gamereq::UserOperation* GameFrameReq::release_userope() {
  
  ::gamereq::UserOperation* temp = userope_;
  userope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::UserOperation* GameFrameReq::unsafe_arena_release_userope() {
  // @@protoc_insertion_point(field_release:gamereq.GameFrameReq.userope)
  
  ::gamereq::UserOperation* temp = userope_;
  userope_ = nullptr;
  return temp;
}
inline ::gamereq::UserOperation* GameFrameReq::_internal_mutable_userope() {
  
  if (userope_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::UserOperation>(GetArena());
    userope_ = p;
  }
  return userope_;
}
inline ::gamereq::UserOperation* GameFrameReq::mutable_userope() {
  // @@protoc_insertion_point(field_mutable:gamereq.GameFrameReq.userope)
  return _internal_mutable_userope();
}
inline void GameFrameReq::set_allocated_userope(::gamereq::UserOperation* userope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete userope_;
  }
  if (userope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(userope);
    if (message_arena != submessage_arena) {
      userope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userope, submessage_arena);
    }
    
  } else {
    
  }
  userope_ = userope;
  // @@protoc_insertion_point(field_set_allocated:gamereq.GameFrameReq.userope)
}

// -------------------------------------------------------------------

// GameFrameNtf

// uint32 frame = 1;
inline void GameFrameNtf::clear_frame() {
  frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameNtf::_internal_frame() const {
  return frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameFrameNtf::frame() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameNtf.frame)
  return _internal_frame();
}
inline void GameFrameNtf::_internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_ = value;
}
inline void GameFrameNtf::set_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:gamereq.GameFrameNtf.frame)
}

// repeated .gamereq.UserOperation useropes = 2;
inline int GameFrameNtf::_internal_useropes_size() const {
  return useropes_.size();
}
inline int GameFrameNtf::useropes_size() const {
  return _internal_useropes_size();
}
inline void GameFrameNtf::clear_useropes() {
  useropes_.Clear();
}
inline ::gamereq::UserOperation* GameFrameNtf::mutable_useropes(int index) {
  // @@protoc_insertion_point(field_mutable:gamereq.GameFrameNtf.useropes)
  return useropes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >*
GameFrameNtf::mutable_useropes() {
  // @@protoc_insertion_point(field_mutable_list:gamereq.GameFrameNtf.useropes)
  return &useropes_;
}
inline const ::gamereq::UserOperation& GameFrameNtf::_internal_useropes(int index) const {
  return useropes_.Get(index);
}
inline const ::gamereq::UserOperation& GameFrameNtf::useropes(int index) const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrameNtf.useropes)
  return _internal_useropes(index);
}
inline ::gamereq::UserOperation* GameFrameNtf::_internal_add_useropes() {
  return useropes_.Add();
}
inline ::gamereq::UserOperation* GameFrameNtf::add_useropes() {
  // @@protoc_insertion_point(field_add:gamereq.GameFrameNtf.useropes)
  return _internal_add_useropes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >&
GameFrameNtf::useropes() const {
  // @@protoc_insertion_point(field_list:gamereq.GameFrameNtf.useropes)
  return useropes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamereq

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto
