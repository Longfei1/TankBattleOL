// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamereq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gamereq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gamereq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gamereq_2eproto;
namespace gamereq {
class GameFrame;
class GameFrameDefaultTypeInternal;
extern GameFrameDefaultTypeInternal _GameFrame_default_instance_;
class GameOperation;
class GameOperationDefaultTypeInternal;
extern GameOperationDefaultTypeInternal _GameOperation_default_instance_;
class LoginInfo;
class LoginInfoDefaultTypeInternal;
extern LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
class MainGameFrame;
class MainGameFrameDefaultTypeInternal;
extern MainGameFrameDefaultTypeInternal _MainGameFrame_default_instance_;
class RoomOperation;
class RoomOperationDefaultTypeInternal;
extern RoomOperationDefaultTypeInternal _RoomOperation_default_instance_;
class RoomPlayerInfo;
class RoomPlayerInfoDefaultTypeInternal;
extern RoomPlayerInfoDefaultTypeInternal _RoomPlayerInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserOperation;
class UserOperationDefaultTypeInternal;
extern UserOperationDefaultTypeInternal _UserOperation_default_instance_;
}  // namespace gamereq
PROTOBUF_NAMESPACE_OPEN
template<> ::gamereq::GameFrame* Arena::CreateMaybeMessage<::gamereq::GameFrame>(Arena*);
template<> ::gamereq::GameOperation* Arena::CreateMaybeMessage<::gamereq::GameOperation>(Arena*);
template<> ::gamereq::LoginInfo* Arena::CreateMaybeMessage<::gamereq::LoginInfo>(Arena*);
template<> ::gamereq::MainGameFrame* Arena::CreateMaybeMessage<::gamereq::MainGameFrame>(Arena*);
template<> ::gamereq::RoomOperation* Arena::CreateMaybeMessage<::gamereq::RoomOperation>(Arena*);
template<> ::gamereq::RoomPlayerInfo* Arena::CreateMaybeMessage<::gamereq::RoomPlayerInfo>(Arena*);
template<> ::gamereq::UserInfo* Arena::CreateMaybeMessage<::gamereq::UserInfo>(Arena*);
template<> ::gamereq::UserOperation* Arena::CreateMaybeMessage<::gamereq::UserOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gamereq {

// ===================================================================

class LoginInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.LoginInfo) */ {
 public:
  inline LoginInfo() : LoginInfo(nullptr) {}
  virtual ~LoginInfo();

  LoginInfo(const LoginInfo& from);
  LoginInfo(LoginInfo&& from) noexcept
    : LoginInfo() {
    *this = ::std::move(from);
  }

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInfo& operator=(LoginInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginInfo& default_instance();

  static inline const LoginInfo* internal_default_instance() {
    return reinterpret_cast<const LoginInfo*>(
               &_LoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginInfo& a, LoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginInfo* New() const final {
    return CreateMaybeMessage<LoginInfo>(nullptr);
  }

  LoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.LoginInfo";
  }
  protected:
  explicit LoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.LoginInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class RoomPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.RoomPlayerInfo) */ {
 public:
  inline RoomPlayerInfo() : RoomPlayerInfo(nullptr) {}
  virtual ~RoomPlayerInfo();

  RoomPlayerInfo(const RoomPlayerInfo& from);
  RoomPlayerInfo(RoomPlayerInfo&& from) noexcept
    : RoomPlayerInfo() {
    *this = ::std::move(from);
  }

  inline RoomPlayerInfo& operator=(const RoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomPlayerInfo& operator=(RoomPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomPlayerInfo& default_instance();

  static inline const RoomPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const RoomPlayerInfo*>(
               &_RoomPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomPlayerInfo& a, RoomPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomPlayerInfo* New() const final {
    return CreateMaybeMessage<RoomPlayerInfo>(nullptr);
  }

  RoomPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomPlayerInfo& from);
  void MergeFrom(const RoomPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.RoomPlayerInfo";
  }
  protected:
  explicit RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
    kPlayernoFieldNumber = 2,
    kUseridFieldNumber = 3,
  };
  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerno = 2;
  void clear_playerno();
  ::PROTOBUF_NAMESPACE_ID::int32 playerno() const;
  void set_playerno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerno() const;
  void _internal_set_playerno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userid = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.RoomPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerno_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class RoomOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.RoomOperation) */ {
 public:
  inline RoomOperation() : RoomOperation(nullptr) {}
  virtual ~RoomOperation();

  RoomOperation(const RoomOperation& from);
  RoomOperation(RoomOperation&& from) noexcept
    : RoomOperation() {
    *this = ::std::move(from);
  }

  inline RoomOperation& operator=(const RoomOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomOperation& operator=(RoomOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomOperation& default_instance();

  static inline const RoomOperation* internal_default_instance() {
    return reinterpret_cast<const RoomOperation*>(
               &_RoomOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomOperation& a, RoomOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomOperation* New() const final {
    return CreateMaybeMessage<RoomOperation>(nullptr);
  }

  RoomOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomOperation& from);
  void MergeFrom(const RoomOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.RoomOperation";
  }
  protected:
  explicit RoomOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .gamereq.RoomPlayerInfo where = 1;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const ::gamereq::RoomPlayerInfo& where() const;
  ::gamereq::RoomPlayerInfo* release_where();
  ::gamereq::RoomPlayerInfo* mutable_where();
  void set_allocated_where(::gamereq::RoomPlayerInfo* where);
  private:
  const ::gamereq::RoomPlayerInfo& _internal_where() const;
  ::gamereq::RoomPlayerInfo* _internal_mutable_where();
  public:
  void unsafe_arena_set_allocated_where(
      ::gamereq::RoomPlayerInfo* where);
  ::gamereq::RoomPlayerInfo* unsafe_arena_release_where();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.RoomOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::RoomPlayerInfo* where_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class GameOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.GameOperation) */ {
 public:
  inline GameOperation() : GameOperation(nullptr) {}
  virtual ~GameOperation();

  GameOperation(const GameOperation& from);
  GameOperation(GameOperation&& from) noexcept
    : GameOperation() {
    *this = ::std::move(from);
  }

  inline GameOperation& operator=(const GameOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameOperation& operator=(GameOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameOperation& default_instance();

  static inline const GameOperation* internal_default_instance() {
    return reinterpret_cast<const GameOperation*>(
               &_GameOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameOperation& a, GameOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(GameOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameOperation* New() const final {
    return CreateMaybeMessage<GameOperation>(nullptr);
  }

  GameOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameOperation& from);
  void MergeFrom(const GameOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.GameOperation";
  }
  protected:
  explicit GameOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kEventFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 event = 2;
  void clear_event();
  ::PROTOBUF_NAMESPACE_ID::int32 event() const;
  void set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event() const;
  void _internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.GameOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class UserOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.UserOperation) */ {
 public:
  inline UserOperation() : UserOperation(nullptr) {}
  virtual ~UserOperation();

  UserOperation(const UserOperation& from);
  UserOperation(UserOperation&& from) noexcept
    : UserOperation() {
    *this = ::std::move(from);
  }

  inline UserOperation& operator=(const UserOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOperation& operator=(UserOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOperation& default_instance();

  static inline const UserOperation* internal_default_instance() {
    return reinterpret_cast<const UserOperation*>(
               &_UserOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserOperation& a, UserOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOperation* New() const final {
    return CreateMaybeMessage<UserOperation>(nullptr);
  }

  UserOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOperation& from);
  void MergeFrom(const UserOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.UserOperation";
  }
  protected:
  explicit UserOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 1,
    kOpeFieldNumber = 2,
  };
  // .gamereq.RoomPlayerInfo where = 1;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const ::gamereq::RoomPlayerInfo& where() const;
  ::gamereq::RoomPlayerInfo* release_where();
  ::gamereq::RoomPlayerInfo* mutable_where();
  void set_allocated_where(::gamereq::RoomPlayerInfo* where);
  private:
  const ::gamereq::RoomPlayerInfo& _internal_where() const;
  ::gamereq::RoomPlayerInfo* _internal_mutable_where();
  public:
  void unsafe_arena_set_allocated_where(
      ::gamereq::RoomPlayerInfo* where);
  ::gamereq::RoomPlayerInfo* unsafe_arena_release_where();

  // .gamereq.GameOperation ope = 2;
  bool has_ope() const;
  private:
  bool _internal_has_ope() const;
  public:
  void clear_ope();
  const ::gamereq::GameOperation& ope() const;
  ::gamereq::GameOperation* release_ope();
  ::gamereq::GameOperation* mutable_ope();
  void set_allocated_ope(::gamereq::GameOperation* ope);
  private:
  const ::gamereq::GameOperation& _internal_ope() const;
  ::gamereq::GameOperation* _internal_mutable_ope();
  public:
  void unsafe_arena_set_allocated_ope(
      ::gamereq::GameOperation* ope);
  ::gamereq::GameOperation* unsafe_arena_release_ope();

  // @@protoc_insertion_point(class_scope:gamereq.UserOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gamereq::RoomPlayerInfo* where_;
  ::gamereq::GameOperation* ope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class GameFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.GameFrame) */ {
 public:
  inline GameFrame() : GameFrame(nullptr) {}
  virtual ~GameFrame();

  GameFrame(const GameFrame& from);
  GameFrame(GameFrame&& from) noexcept
    : GameFrame() {
    *this = ::std::move(from);
  }

  inline GameFrame& operator=(const GameFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFrame& operator=(GameFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameFrame& default_instance();

  static inline const GameFrame* internal_default_instance() {
    return reinterpret_cast<const GameFrame*>(
               &_GameFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameFrame& a, GameFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameFrame* New() const final {
    return CreateMaybeMessage<GameFrame>(nullptr);
  }

  GameFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameFrame& from);
  void MergeFrom(const GameFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.GameFrame";
  }
  protected:
  explicit GameFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseropesFieldNumber = 2,
    kFrameFieldNumber = 1,
  };
  // repeated .gamereq.UserOperation useropes = 2;
  int useropes_size() const;
  private:
  int _internal_useropes_size() const;
  public:
  void clear_useropes();
  ::gamereq::UserOperation* mutable_useropes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >*
      mutable_useropes();
  private:
  const ::gamereq::UserOperation& _internal_useropes(int index) const;
  ::gamereq::UserOperation* _internal_add_useropes();
  public:
  const ::gamereq::UserOperation& useropes(int index) const;
  ::gamereq::UserOperation* add_useropes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >&
      useropes() const;

  // int32 frame = 1;
  void clear_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame() const;
  void _internal_set_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gamereq.GameFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation > useropes_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// -------------------------------------------------------------------

class MainGameFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gamereq.MainGameFrame) */ {
 public:
  inline MainGameFrame() : MainGameFrame(nullptr) {}
  virtual ~MainGameFrame();

  MainGameFrame(const MainGameFrame& from);
  MainGameFrame(MainGameFrame&& from) noexcept
    : MainGameFrame() {
    *this = ::std::move(from);
  }

  inline MainGameFrame& operator=(const MainGameFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainGameFrame& operator=(MainGameFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MainGameFrame& default_instance();

  static inline const MainGameFrame* internal_default_instance() {
    return reinterpret_cast<const MainGameFrame*>(
               &_MainGameFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MainGameFrame& a, MainGameFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(MainGameFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainGameFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MainGameFrame* New() const final {
    return CreateMaybeMessage<MainGameFrame>(nullptr);
  }

  MainGameFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MainGameFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MainGameFrame& from);
  void MergeFrom(const MainGameFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainGameFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gamereq.MainGameFrame";
  }
  protected:
  explicit MainGameFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gamereq_2eproto);
    return ::descriptor_table_gamereq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .gamereq.GameFrame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::gamereq::GameFrame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrame >*
      mutable_frames();
  private:
  const ::gamereq::GameFrame& _internal_frames(int index) const;
  ::gamereq::GameFrame* _internal_add_frames();
  public:
  const ::gamereq::GameFrame& frames(int index) const;
  ::gamereq::GameFrame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:gamereq.MainGameFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gamereq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginInfo

// int32 userid = 1;
inline void LoginInfo::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInfo.userid)
  return _internal_userid();
}
inline void LoginInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void LoginInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInfo.userid)
}

// int64 timestamp = 2;
inline void LoginInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:gamereq.LoginInfo.timestamp)
  return _internal_timestamp();
}
inline void LoginInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void LoginInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gamereq.LoginInfo.timestamp)
}

// -------------------------------------------------------------------

// UserInfo

// int32 userid = 1;
inline void UserInfo::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.UserInfo.userid)
  return _internal_userid();
}
inline void UserInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void UserInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.UserInfo.userid)
}

// -------------------------------------------------------------------

// RoomPlayerInfo

// int32 roomid = 1;
inline void RoomPlayerInfo::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::roomid() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.roomid)
  return _internal_roomid();
}
inline void RoomPlayerInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomPlayerInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.roomid)
}

// int32 playerno = 2;
inline void RoomPlayerInfo::clear_playerno() {
  playerno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::_internal_playerno() const {
  return playerno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::playerno() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.playerno)
  return _internal_playerno();
}
inline void RoomPlayerInfo::_internal_set_playerno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerno_ = value;
}
inline void RoomPlayerInfo::set_playerno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerno(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.playerno)
}

// int32 userid = 3;
inline void RoomPlayerInfo::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomPlayerInfo::userid() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomPlayerInfo.userid)
  return _internal_userid();
}
inline void RoomPlayerInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void RoomPlayerInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomPlayerInfo.userid)
}

// -------------------------------------------------------------------

// RoomOperation

// .gamereq.RoomPlayerInfo where = 1;
inline bool RoomOperation::_internal_has_where() const {
  return this != internal_default_instance() && where_ != nullptr;
}
inline bool RoomOperation::has_where() const {
  return _internal_has_where();
}
inline void RoomOperation::clear_where() {
  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
}
inline const ::gamereq::RoomPlayerInfo& RoomOperation::_internal_where() const {
  const ::gamereq::RoomPlayerInfo* p = where_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::RoomPlayerInfo&>(
      ::gamereq::_RoomPlayerInfo_default_instance_);
}
inline const ::gamereq::RoomPlayerInfo& RoomOperation::where() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomOperation.where)
  return _internal_where();
}
inline void RoomOperation::unsafe_arena_set_allocated_where(
    ::gamereq::RoomPlayerInfo* where) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(where_);
  }
  where_ = where;
  if (where) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.RoomOperation.where)
}
inline ::gamereq::RoomPlayerInfo* RoomOperation::release_where() {
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::RoomPlayerInfo* RoomOperation::unsafe_arena_release_where() {
  // @@protoc_insertion_point(field_release:gamereq.RoomOperation.where)
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  return temp;
}
inline ::gamereq::RoomPlayerInfo* RoomOperation::_internal_mutable_where() {
  
  if (where_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::RoomPlayerInfo>(GetArena());
    where_ = p;
  }
  return where_;
}
inline ::gamereq::RoomPlayerInfo* RoomOperation::mutable_where() {
  // @@protoc_insertion_point(field_mutable:gamereq.RoomOperation.where)
  return _internal_mutable_where();
}
inline void RoomOperation::set_allocated_where(::gamereq::RoomPlayerInfo* where) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete where_;
  }
  if (where) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(where);
    if (message_arena != submessage_arena) {
      where = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    
  } else {
    
  }
  where_ = where;
  // @@protoc_insertion_point(field_set_allocated:gamereq.RoomOperation.where)
}

// bool success = 2;
inline void RoomOperation::clear_success() {
  success_ = false;
}
inline bool RoomOperation::_internal_success() const {
  return success_;
}
inline bool RoomOperation::success() const {
  // @@protoc_insertion_point(field_get:gamereq.RoomOperation.success)
  return _internal_success();
}
inline void RoomOperation::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RoomOperation::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:gamereq.RoomOperation.success)
}

// -------------------------------------------------------------------

// GameOperation

// int32 key = 1;
inline void GameOperation::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameOperation::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameOperation::key() const {
  // @@protoc_insertion_point(field_get:gamereq.GameOperation.key)
  return _internal_key();
}
inline void GameOperation::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void GameOperation::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gamereq.GameOperation.key)
}

// int32 event = 2;
inline void GameOperation::clear_event() {
  event_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameOperation::_internal_event() const {
  return event_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameOperation::event() const {
  // @@protoc_insertion_point(field_get:gamereq.GameOperation.event)
  return _internal_event();
}
inline void GameOperation::_internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_ = value;
}
inline void GameOperation::set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:gamereq.GameOperation.event)
}

// -------------------------------------------------------------------

// UserOperation

// .gamereq.RoomPlayerInfo where = 1;
inline bool UserOperation::_internal_has_where() const {
  return this != internal_default_instance() && where_ != nullptr;
}
inline bool UserOperation::has_where() const {
  return _internal_has_where();
}
inline void UserOperation::clear_where() {
  if (GetArena() == nullptr && where_ != nullptr) {
    delete where_;
  }
  where_ = nullptr;
}
inline const ::gamereq::RoomPlayerInfo& UserOperation::_internal_where() const {
  const ::gamereq::RoomPlayerInfo* p = where_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::RoomPlayerInfo&>(
      ::gamereq::_RoomPlayerInfo_default_instance_);
}
inline const ::gamereq::RoomPlayerInfo& UserOperation::where() const {
  // @@protoc_insertion_point(field_get:gamereq.UserOperation.where)
  return _internal_where();
}
inline void UserOperation::unsafe_arena_set_allocated_where(
    ::gamereq::RoomPlayerInfo* where) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(where_);
  }
  where_ = where;
  if (where) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.UserOperation.where)
}
inline ::gamereq::RoomPlayerInfo* UserOperation::release_where() {
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::RoomPlayerInfo* UserOperation::unsafe_arena_release_where() {
  // @@protoc_insertion_point(field_release:gamereq.UserOperation.where)
  
  ::gamereq::RoomPlayerInfo* temp = where_;
  where_ = nullptr;
  return temp;
}
inline ::gamereq::RoomPlayerInfo* UserOperation::_internal_mutable_where() {
  
  if (where_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::RoomPlayerInfo>(GetArena());
    where_ = p;
  }
  return where_;
}
inline ::gamereq::RoomPlayerInfo* UserOperation::mutable_where() {
  // @@protoc_insertion_point(field_mutable:gamereq.UserOperation.where)
  return _internal_mutable_where();
}
inline void UserOperation::set_allocated_where(::gamereq::RoomPlayerInfo* where) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete where_;
  }
  if (where) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(where);
    if (message_arena != submessage_arena) {
      where = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    
  } else {
    
  }
  where_ = where;
  // @@protoc_insertion_point(field_set_allocated:gamereq.UserOperation.where)
}

// .gamereq.GameOperation ope = 2;
inline bool UserOperation::_internal_has_ope() const {
  return this != internal_default_instance() && ope_ != nullptr;
}
inline bool UserOperation::has_ope() const {
  return _internal_has_ope();
}
inline void UserOperation::clear_ope() {
  if (GetArena() == nullptr && ope_ != nullptr) {
    delete ope_;
  }
  ope_ = nullptr;
}
inline const ::gamereq::GameOperation& UserOperation::_internal_ope() const {
  const ::gamereq::GameOperation* p = ope_;
  return p != nullptr ? *p : reinterpret_cast<const ::gamereq::GameOperation&>(
      ::gamereq::_GameOperation_default_instance_);
}
inline const ::gamereq::GameOperation& UserOperation::ope() const {
  // @@protoc_insertion_point(field_get:gamereq.UserOperation.ope)
  return _internal_ope();
}
inline void UserOperation::unsafe_arena_set_allocated_ope(
    ::gamereq::GameOperation* ope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ope_);
  }
  ope_ = ope;
  if (ope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gamereq.UserOperation.ope)
}
inline ::gamereq::GameOperation* UserOperation::release_ope() {
  
  ::gamereq::GameOperation* temp = ope_;
  ope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gamereq::GameOperation* UserOperation::unsafe_arena_release_ope() {
  // @@protoc_insertion_point(field_release:gamereq.UserOperation.ope)
  
  ::gamereq::GameOperation* temp = ope_;
  ope_ = nullptr;
  return temp;
}
inline ::gamereq::GameOperation* UserOperation::_internal_mutable_ope() {
  
  if (ope_ == nullptr) {
    auto* p = CreateMaybeMessage<::gamereq::GameOperation>(GetArena());
    ope_ = p;
  }
  return ope_;
}
inline ::gamereq::GameOperation* UserOperation::mutable_ope() {
  // @@protoc_insertion_point(field_mutable:gamereq.UserOperation.ope)
  return _internal_mutable_ope();
}
inline void UserOperation::set_allocated_ope(::gamereq::GameOperation* ope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ope_;
  }
  if (ope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ope);
    if (message_arena != submessage_arena) {
      ope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ope, submessage_arena);
    }
    
  } else {
    
  }
  ope_ = ope;
  // @@protoc_insertion_point(field_set_allocated:gamereq.UserOperation.ope)
}

// -------------------------------------------------------------------

// GameFrame

// int32 frame = 1;
inline void GameFrame::clear_frame() {
  frame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFrame::_internal_frame() const {
  return frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFrame::frame() const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrame.frame)
  return _internal_frame();
}
inline void GameFrame::_internal_set_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_ = value;
}
inline void GameFrame::set_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:gamereq.GameFrame.frame)
}

// repeated .gamereq.UserOperation useropes = 2;
inline int GameFrame::_internal_useropes_size() const {
  return useropes_.size();
}
inline int GameFrame::useropes_size() const {
  return _internal_useropes_size();
}
inline void GameFrame::clear_useropes() {
  useropes_.Clear();
}
inline ::gamereq::UserOperation* GameFrame::mutable_useropes(int index) {
  // @@protoc_insertion_point(field_mutable:gamereq.GameFrame.useropes)
  return useropes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >*
GameFrame::mutable_useropes() {
  // @@protoc_insertion_point(field_mutable_list:gamereq.GameFrame.useropes)
  return &useropes_;
}
inline const ::gamereq::UserOperation& GameFrame::_internal_useropes(int index) const {
  return useropes_.Get(index);
}
inline const ::gamereq::UserOperation& GameFrame::useropes(int index) const {
  // @@protoc_insertion_point(field_get:gamereq.GameFrame.useropes)
  return _internal_useropes(index);
}
inline ::gamereq::UserOperation* GameFrame::_internal_add_useropes() {
  return useropes_.Add();
}
inline ::gamereq::UserOperation* GameFrame::add_useropes() {
  // @@protoc_insertion_point(field_add:gamereq.GameFrame.useropes)
  return _internal_add_useropes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::UserOperation >&
GameFrame::useropes() const {
  // @@protoc_insertion_point(field_list:gamereq.GameFrame.useropes)
  return useropes_;
}

// -------------------------------------------------------------------

// MainGameFrame

// repeated .gamereq.GameFrame frames = 1;
inline int MainGameFrame::_internal_frames_size() const {
  return frames_.size();
}
inline int MainGameFrame::frames_size() const {
  return _internal_frames_size();
}
inline void MainGameFrame::clear_frames() {
  frames_.Clear();
}
inline ::gamereq::GameFrame* MainGameFrame::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:gamereq.MainGameFrame.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrame >*
MainGameFrame::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:gamereq.MainGameFrame.frames)
  return &frames_;
}
inline const ::gamereq::GameFrame& MainGameFrame::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::gamereq::GameFrame& MainGameFrame::frames(int index) const {
  // @@protoc_insertion_point(field_get:gamereq.MainGameFrame.frames)
  return _internal_frames(index);
}
inline ::gamereq::GameFrame* MainGameFrame::_internal_add_frames() {
  return frames_.Add();
}
inline ::gamereq::GameFrame* MainGameFrame::add_frames() {
  // @@protoc_insertion_point(field_add:gamereq.MainGameFrame.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gamereq::GameFrame >&
MainGameFrame::frames() const {
  // @@protoc_insertion_point(field_list:gamereq.MainGameFrame.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamereq

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gamereq_2eproto
